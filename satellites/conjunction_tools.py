#!/usr/bin/env python
# coding: utf-8

########################################
# SHEET 1     (20191025): Read conjunction lists from https://sscweb.gsfc.nasa.gov/cgi-bin/Query.cgi, make dataframe
########################################

from datetime import datetime,timedelta
import importlib
import matplotlib as mpl
import numpy as np
import pandas as pd
from scipy.optimize import curve_fit
from scipy import interpolate
from scipy.signal import savgol_filter,argrelextrema
from scipy.interpolate import interp1d
import tkinter
mplBkgrnd = 'TkAgg'
mpl.use(mplBkgrnd)

from hatch_python_utils.hatch_utils import get_basedir
baseDir,isColtrane = get_basedir()

import sys
if not (baseDir+'sandbox_and_journals/journals/Swarm/') in sys.path:
    sys.path.append(baseDir+'sandbox_and_journals/journals/Swarm/')
import swarmProcHelper as sPH
importlib.reload(sPH)

from hatch_python_utils.earth.utils import sphDist

import apexpy
from pytt.earth import geodesy

import matplotlib.pyplot as plt

plt.ion()

mpl.rcParams.update({'text.color': 'k'})
mpl.rcParams.update({'axes.labelcolor': 'k'})
mpl.rcParams.update({'xtick.color': 'k'})
mpl.rcParams.update({'ytick.color': 'k'})
mpl.rcParams.update({'font.size': 15})
mpl.rcParams.update({'figure.figsize' : [10.0, 8.0]})
mpl.rcParams.update({'text.usetex' : False})

import hatch_python_utils
from hatch_python_utils.earth import coordinates as hCoord
junk = importlib.reload(hatch_python_utils)
junk = importlib.reload(hCoord)


def read_nasa_sscweb_query_output(txtfiles,output):
    """
    Read output from a conjunction list generated by NASA Satellite Situation Center's Query tool* and output a pandas DataFrame

    NOTE: This will probably not work without modification based on the structure of your query output

    * https://sscweb.gsfc.nasa.gov/cgi-bin/Query.cgi

    """

    apex_refh_km = 110

    numerics = ['glat','glon','r_km','tracelat','tracelon','arclenkm','dist']
    datetimes = ['date']

    if isinstance(txtfiles,str):
        txtfiles = [txtfiles]

    # doSave = True
    # outdir = '/SPENCEdata/Research/database/Swarm/konjunksjoner/'
    # outcsv = 'Swarm'+leadSatLetter+'B_konj_'+datesuff+'.csv'

    df = pd.DataFrame(columns=['date','satellite','glat','glon','r_km','tracelat','tracelon','arclenkm','dist','leadname'])
    keepcount = 0
    
    for infile in txtfiles:
        with open(infile) as fp:
            line = fp.readline()        # first line
            cnt = 1
        
            print("Line {}: {}".format(cnt, line.strip()))
        
            while line:
                line = fp.readline()
                cnt += 1
        
                if len(line) < 10:
                    # print("Tooshort! Skipt!")
                    continue
        
                try:
                    yr = int(line[0:2])            
                except:
                    # print("noparse! Skipt!")
                    continue
        
                if line[2] != '/':
                    # print("notyear! Skipt!")
                    continue
        
                print("Line {}: {}".format(cnt, line.strip()))
        
                parseline = [this for this in line.split(' ') if (this != '')]
                linelen = len(parseline)
                if linelen == 11:
                    date, timestr, satellite, glat, glon, r_km, tracelat, tracelon, arclenkm, dist,leadname = parseline
                    prevsat = satellite
                elif linelen == 10:
                    date, timestr, glat, glon, r_km, tracelat, tracelon, arclenkm, dist,leadname = parseline
                    satellite = prevsat
                elif linelen == 9:
                    date, timestr, satellite, glat, glon, r_km, tracelat, tracelon, arclenkm = parseline
                    dist = '0'
                    leadname = leadSatName
                    prevsat = satellite
                elif linelen == 8:
                    date, timestr, glat, glon, r_km, tracelat, tracelon, arclenkm = parseline
                    dist = '0'
                    leadname = leadSatName
                    satellite = prevsat
                else:
                    assert 2<0,"AARRRG"
    
                dt = datetime.strptime('20'+date+' '+timestr,"%Y/%m/%d %H:%M:%S")
                glat = float(glat)
                glon = float(glon)
                r_km = int(r_km)
                tracelat = float(tracelat)
                tracelon = float(tracelon)
                arclenkm = int(arclenkm)
                dist = int(dist.replace('\n',''))
    
                df.loc[keepcount] = [dt,satellite,glat,glon,r_km,tracelat,tracelon,arclenkm,dist,leadname.replace('\n','')]
        
                keepcount += 1
        
                # break
                # if cnt > 93:
                #     break
    
    for num in numerics:
        df[num] = pd.to_numeric(df[num])
    for dat in datetimes:
        df[dat] = pd.to_datetime(df[dat])
    
    # df = df.astype({'r_km': 'int64','arclenkm':'int64'}).copy()
    
    gdlat = geodesy.geocentric2geodeticlat(df['glat'].values)
    gdlat2, heights = hCoord.geoclatR2geodlatheight(df['glat'].values,df['r_km'].values)
    df['alt'] = heights
    df['gdlat'] = gdlat
    
    mlats = []
    mlons = []
    mlts = []
    for i in range(df.shape[0]):
        # print(i)
        a = apexpy.Apex(date=df.iloc[i].date,refh=apex_refh_km)
        mlat, mlon = a.geo2apex(df.iloc[i]['gdlat'],
                                df.iloc[i]['glon'],
                                df.iloc[i]['alt'])
    
        mlt = a.mlon2mlt(mlon,df.iloc[i].date)
    
        mlats.append(mlat)
        mlons.append(mlon)
        mlts.append(mlt)
    
    df['mlat'] = mlats
    df['mlon'] = mlons
    df['mlt'] = mlts
    
    # df.mlt.hist()
    df.set_index('date',inplace=True)
    df.sort_index(inplace=True)
    
    dfA = df[df['satellite'] == leadSatName].copy()
    dfB = df[df['satellite'] == 'swarmb'].copy()
    
    dfA.drop(labels='satellite',axis=1,inplace=True)
    dfB.drop(labels='satellite',axis=1,inplace=True)
    
    combo = dfA.join(dfB,lsuffix=leadSatLetter,rsuffix='B')
    
    # get sphdist
    combo['sphDist_mag'] = sphDist(combo['mlat'+leadSatLetter], combo['mlon'+leadSatLetter], combo['mlatB'], combo['mlonB'],
                                   mltMode=False)
    combo['sphDist_geoc'] = sphDist(combo['glat'+leadSatLetter], combo['glon'+leadSatLetter], combo['glatB'], combo['glonB'],
                                   mltMode=False)
    combo['sphDist_geod'] = sphDist(combo['gdlat'+leadSatLetter], combo['glon'+leadSatLetter], combo['gdlatB'], combo['glonB'],
                                   mltMode=False)
    
    
    return combo

    # if doSave:
    #     print("Saving to {:s}".format(outcsv))
    #     combo.to_csv(outdir+outcsv)
    


